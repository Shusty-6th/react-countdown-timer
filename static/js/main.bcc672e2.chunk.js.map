{"version":3,"sources":["CounterItem.js","App.js","serviceWorker.js","index.js"],"names":["CounterItem","props","className","number","unit","App","state","nameOfTheEvent","countdownDate","imgLink","counterItems","seconds","minutes","hours","days","areSettingsEnabled","calculateTimetoEnd","time","Date","getTime","setState","String","Math","floor","handleChange","e","target","name","value","handleClick","prevState","this","intervalItem","setInterval","clearInterval","numberItemsComponents","Object","entries","map","key","reverse","headerBackground","backgroundImage","style","onClick","icon","faSlidersH","type","onChange","min","toISOString","slice","max","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mTAWeA,EATK,SAACC,GACnB,OACE,yBAAKC,UAAU,eACb,4BAAKD,EAAME,QACX,4BAAKF,EAAMG,Q,uBCuHFC,E,4MAtHbC,MAAQ,CACNC,eAAgB,mBAChBC,cAAe,sBACfC,QAAS,kCACTC,aAAc,CACZC,QAAS,KACTC,QAAS,KACTC,MAAO,KACPC,KAAM,MAERC,oBAAoB,G,EAGtBC,mBAAqB,WACnB,IAAMC,EACJ,IAAIC,KAAK,EAAKZ,MAAME,eAAeW,WAAY,IAAID,MAAOC,UAE5D,EAAKC,SAAS,CACZV,aAAc,CACZC,QAASU,OAAOC,KAAKC,MAAON,EAAI,IAAkB,MAClDL,QAASS,OAAOC,KAAKC,MAAON,EAAI,KAAL,MAC3BJ,MAAOQ,OACLC,KAAKC,MAAON,EAAI,MAAL,OAEbH,KAAMO,OAAOC,KAAKC,MAAMN,EAAI,Y,EAYlCO,aAAe,SAACC,GACd,EAAKL,SAAL,eAAiBK,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,S,EAG5CC,YAAc,WACZ,EAAKT,UAAS,SAACU,GACb,MAAO,CAAEf,oBAAqBe,EAAUf,wB,kEAZ1CgB,KAAKC,aAAeC,YAAYF,KAAKf,mBAAoB,O,6CAGzDkB,cAAcH,KAAKC,gB,+BAaX,IAAD,EAOHD,KAAKzB,MALPC,EAFK,EAELA,eACAG,EAHK,EAGLA,aACAF,EAJK,EAILA,cACAC,EALK,EAKLA,QACAM,EANK,EAMLA,mBAGIoB,EAAwBC,OAAOC,QAAQ3B,GAC1C4B,KAAI,mCAAEC,EAAF,KAAOX,EAAP,YACH,kBAAC,EAAD,CAAaW,IAAKA,EAAKnC,KAAMmC,EAAKpC,OAAQyB,OAE3CY,UAEGC,EAAmB,CAAEC,gBAAgB,QAAD,OAAUjC,EAAV,OAE1C,OACE,8BACE,4BAAQkC,MAAOF,GACb,4BACEvC,UAAWa,EAAqB,SAAW,GAC3C6B,QAASb,KAAKF,aAEd,kBAAC,IAAD,CAAiBgB,KAAMC,QAG3B,6BAAS5C,UAAS,mBAAca,EAAqB,SAAW,KAC9D,wCACA,yBAAKb,UAAU,UACb,+BACE,qDACA,2BACE0B,MAAOrB,EACPoB,KAAK,iBACLoB,KAAK,OACLC,SAAUjB,KAAKP,gBAGnB,+BACE,wCACA,2BACEI,MAAOpB,EACPmB,KAAK,gBACLoB,KAAK,iBACLE,KAAK,IAAI/B,MAAOgC,cAAcC,MAAM,EAAG,IACvCC,IAAK,IAAIlC,KAAK,cAAcgC,cAAcC,MAAM,EAAG,IACnDH,SAAUjB,KAAKP,gBAGnB,+BACE,8CACA,2BACEI,MAAOnB,EACPkB,KAAK,UACLoB,KAAK,SACLC,SAAUjB,KAAKP,kBAKvB,yBAAKtB,UAAU,SACb,wBAAIA,UAAU,kBAAd,YACW,8BAAOK,IAElB,yBAAKL,UAAU,SAASiC,S,GAhHhBkB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bcc672e2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst CounterItem = (props) => {\r\n  return (\r\n    <div className=\"counterItem\">\r\n      <h2>{props.number}</h2>\r\n      <h3>{props.unit}</h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CounterItem;\r\n","import React, { Component } from \"react\";\nimport CounterItem from \"./CounterItem\";\nimport \"./styles/App.scss\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSlidersH } from \"@fortawesome/free-solid-svg-icons\";\n\nclass App extends Component {\n  state = {\n    nameOfTheEvent: \"End of the world\",\n    countdownDate: \"2022-01-01T21:37:00\", // new Date(\"2050-01-01T16:39:57\"),\n    imgLink: \"https://i.imgur.com/0VvOUXk.png\",\n    counterItems: {\n      seconds: \"00\",\n      minutes: \"00\",\n      hours: \"00\",\n      days: \"00\",\n    },\n    areSettingsEnabled: false,\n  };\n\n  calculateTimetoEnd = () => {\n    const time =\n      new Date(this.state.countdownDate).getTime() - new Date().getTime();\n\n    this.setState({\n      counterItems: {\n        seconds: String(Math.floor((time % (1000 * 60)) / 1000)),\n        minutes: String(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60))),\n        hours: String(\n          Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\n        ),\n        days: String(Math.floor(time / (1000 * 60 * 60 * 24))),\n      },\n    });\n  };\n\n  componentDidMount() {\n    this.intervalItem = setInterval(this.calculateTimetoEnd, 200);\n  }\n  componentWillUnmount() {\n    clearInterval(this.intervalItem);\n  }\n\n  handleChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  handleClick = () => {\n    this.setState((prevState) => {\n      return { areSettingsEnabled: !prevState.areSettingsEnabled };\n    });\n  };\n\n  render() {\n    const {\n      nameOfTheEvent,\n      counterItems,\n      countdownDate,\n      imgLink,\n      areSettingsEnabled,\n    } = this.state;\n\n    const numberItemsComponents = Object.entries(counterItems)\n      .map(([key, value]) => (\n        <CounterItem key={key} unit={key} number={value} />\n      ))\n      .reverse();\n\n    const headerBackground = { backgroundImage: `url(\"${imgLink}\")` };\n\n    return (\n      <main>\n        <header style={headerBackground}>\n          <button\n            className={areSettingsEnabled ? \"active\" : \"\"}\n            onClick={this.handleClick}\n          >\n            <FontAwesomeIcon icon={faSlidersH} />\n          </button>\n        </header>\n        <section className={`settings ${areSettingsEnabled ? \"active\" : \"\"}`}>\n          <h2>Settings</h2>\n          <div className=\"fields\">\n            <label>\n              <span>Name of the event: </span>\n              <input\n                value={nameOfTheEvent}\n                name=\"nameOfTheEvent\"\n                type=\"text\"\n                onChange={this.handleChange}\n              />\n            </label>\n            <label>\n              <span>Date: </span>\n              <input\n                value={countdownDate}\n                name=\"countdownDate\"\n                type=\"datetime-local\"\n                min={new Date().toISOString().slice(0, 16)}\n                max={new Date(\"9999-12-31\").toISOString().slice(0, 16)}\n                onChange={this.handleChange}\n              />\n            </label>\n            <label>\n              <span>Image link: </span>\n              <input\n                value={imgLink}\n                name=\"imgLink\"\n                type=\"search\"\n                onChange={this.handleChange}\n              />\n            </label>\n          </div>\n        </section>\n        <div className=\"timer\">\n          <h2 className=\"nameOfTheEvent\">\n            Time to: <span>{nameOfTheEvent}</span>\n          </h2>\n          <div className=\"items\">{numberItemsComponents}</div>\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}